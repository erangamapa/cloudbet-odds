import { StringDictionary } from './common/types';
interface Selection {
    outcome: string;
    price: number;
    minStake: number;
    maxStake: number;
    status: string;
    probability: number;
    side: string;
    params: string;
}
interface NameKey {
    name: string;
    key: string;
    abbreviation?: string;
}
interface EventData {
    sequence?: string;
    timestamp?: string;
    id: number;
    startTime: string;
    sport: NameKey;
    competition: CompetitionData;
    home?: NameKey | null;
    away?: NameKey | null;
    status?: string;
    metadata: Metadata;
    markets?: StringDictionary<MarketData>;
    players?: StringDictionary<Player>;
    name?: string;
}
interface Player {
    name: string;
    team: string;
    position: Position | null;
}
interface Position {
    name: string;
    key: string;
}
interface CompetitionData {
    id?: number;
    name: string;
    key: string;
    category: NameKey;
}
interface Metadata {
    eventStatus: string;
}
interface MarketData {
    submarkets?: StringDictionary<Submarket>;
}
interface Submarket {
    parlayRestriction: boolean;
    blank?: boolean;
    sequence: string;
    lastModified?: string;
    selections: Selection[];
}
interface SubmarketsData {
    data: StringDictionary<Submarket>;
    keys: string[];
}
export type { Selection, EventData, MarketData, Submarket, SubmarketsData };
