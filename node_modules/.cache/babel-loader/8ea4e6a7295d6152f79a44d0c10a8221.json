{"ast":null,"code":"import { BigNumber } from 'bignumber.js';\nexport var getSingleStakeLimit = function getSingleStakeLimit(liability, price) {\n  return new BigNumber(liability).dividedBy(new BigNumber(price).minus(1)).toNumber();\n};\nexport var getNormalizedRelevances = function getNormalizedRelevances(probabilities) {\n  var totalRelevance = new BigNumber(probabilities.length);\n\n  for (var _i = 0, probabilities_1 = probabilities; _i < probabilities_1.length; _i++) {\n    var prob = probabilities_1[_i];\n    totalRelevance = totalRelevance.minus(prob);\n  }\n\n  return probabilities.map(function (p) {\n    return new BigNumber(1).minus(p).dividedBy(totalRelevance).toNumber();\n  });\n};\nexport var getParlayStakeLimit = function getParlayStakeLimit(legs) {\n  var minSingleStakeLimit = undefined;\n  var singleStakeLimits = new Array(legs.length);\n\n  for (var i = 0; i < legs.length; i++) {\n    var _a = legs[i],\n        liability = _a.liability,\n        price = _a.price;\n    var stakeLimit = getSingleStakeLimit(liability, price);\n    singleStakeLimits[i] = stakeLimit;\n\n    if (minSingleStakeLimit === undefined || stakeLimit < minSingleStakeLimit) {\n      minSingleStakeLimit = stakeLimit;\n    }\n  }\n\n  var parlayStakeLimit = 0;\n  var normalizedRelevances = getNormalizedRelevances(legs.map(function (l) {\n    return l.probability;\n  }));\n\n  for (var i = 0; i < legs.length; i++) {\n    var relevance = normalizedRelevances[i];\n    var singleLimit = singleStakeLimits[i];\n    var legLimit = new BigNumber(singleLimit).multipliedBy(relevance).toNumber(); // we know this wont be undefined at this point anymore\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    parlayStakeLimit += Math.min(legLimit, minSingleStakeLimit);\n  }\n\n  return parlayStakeLimit;\n};","map":{"version":3,"sources":["../lib/liability.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,cAA1B;AAEA,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,SAAD,EAAoB,KAApB,EAAiC;AACnE,SAAA,IAAI,SAAJ,CAAc,SAAd,EAAyB,SAAzB,CAAmC,IAAI,SAAJ,CAAc,KAAd,EAAqB,KAArB,CAA2B,CAA3B,CAAnC,EAAkE,QAAlE,EAAA;AAA4E,CADtE;AAGP,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,CAAC,aAAD,EAAwB;AAC9D,MAAI,cAAc,GAAG,IAAI,SAAJ,CAAc,aAAa,CAAC,MAA5B,CAArB;;AACA,OAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,eAAA,GAAA,aAAnB,EAAmB,EAAA,GAAA,eAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAAkC;AAA7B,QAAM,IAAI,GAAA,eAAA,CAAA,EAAA,CAAV;AACJ,IAAA,cAAc,GAAG,cAAc,CAAC,KAAf,CAAqB,IAArB,CAAjB;AACA;;AACD,SAAO,aAAa,CAAC,GAAd,CAAkB,UAAC,CAAD,EAAE;AAC1B,WAAA,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAjB,CAAuB,CAAvB,EAA0B,SAA1B,CAAoC,cAApC,EAAoD,QAApD,EAAA;AAA8D,GADxD,CAAP;AAGA,CARM;AAUP,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAClC,IADkC,EAC+B;AAEjE,MAAI,mBAAmB,GAAuB,SAA9C;AACA,MAAM,iBAAiB,GAAa,IAAI,KAAJ,CAAU,IAAI,CAAC,MAAf,CAApC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAC/B,QAAA,EAAA,GAAuB,IAAI,CAAC,CAAD,CAA3B;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,KAAK,GAAA,EAAA,CAAA,KAAlB;AACN,QAAM,UAAU,GAAG,mBAAmB,CAAC,SAAD,EAAY,KAAZ,CAAtC;AACA,IAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,UAAvB;;AACA,QAAI,mBAAmB,KAAK,SAAxB,IAAqC,UAAU,GAAG,mBAAtD,EAA2E;AAC1E,MAAA,mBAAmB,GAAG,UAAtB;AACA;AACD;;AAED,MAAI,gBAAgB,GAAG,CAAvB;AACA,MAAM,oBAAoB,GAAG,uBAAuB,CACnD,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAE;AAAK,WAAA,CAAC,CAAD,WAAA;AAAa,GAA7B,CADmD,CAApD;;AAGA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACrC,QAAM,SAAS,GAAG,oBAAoB,CAAC,CAAD,CAAtC;AACA,QAAM,WAAW,GAAG,iBAAiB,CAAC,CAAD,CAArC;AACA,QAAM,QAAQ,GAAG,IAAI,SAAJ,CAAc,WAAd,EACf,YADe,CACF,SADE,EAEf,QAFe,EAAjB,CAHqC,CAMrC;AACA;;AACA,IAAA,gBAAgB,IAAI,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,mBAAnB,CAApB;AACA;;AACD,SAAO,gBAAP;AACA,CA7BM","sourceRoot":"","sourcesContent":["import { BigNumber } from 'bignumber.js';\nexport var getSingleStakeLimit = function (liability, price) {\n    return new BigNumber(liability).dividedBy(new BigNumber(price).minus(1)).toNumber();\n};\nexport var getNormalizedRelevances = function (probabilities) {\n    var totalRelevance = new BigNumber(probabilities.length);\n    for (var _i = 0, probabilities_1 = probabilities; _i < probabilities_1.length; _i++) {\n        var prob = probabilities_1[_i];\n        totalRelevance = totalRelevance.minus(prob);\n    }\n    return probabilities.map(function (p) {\n        return new BigNumber(1).minus(p).dividedBy(totalRelevance).toNumber();\n    });\n};\nexport var getParlayStakeLimit = function (legs) {\n    var minSingleStakeLimit = undefined;\n    var singleStakeLimits = new Array(legs.length);\n    for (var i = 0; i < legs.length; i++) {\n        var _a = legs[i], liability = _a.liability, price = _a.price;\n        var stakeLimit = getSingleStakeLimit(liability, price);\n        singleStakeLimits[i] = stakeLimit;\n        if (minSingleStakeLimit === undefined || stakeLimit < minSingleStakeLimit) {\n            minSingleStakeLimit = stakeLimit;\n        }\n    }\n    var parlayStakeLimit = 0;\n    var normalizedRelevances = getNormalizedRelevances(legs.map(function (l) { return l.probability; }));\n    for (var i = 0; i < legs.length; i++) {\n        var relevance = normalizedRelevances[i];\n        var singleLimit = singleStakeLimits[i];\n        var legLimit = new BigNumber(singleLimit)\n            .multipliedBy(relevance)\n            .toNumber();\n        // we know this wont be undefined at this point anymore\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        parlayStakeLimit += Math.min(legLimit, minSingleStakeLimit);\n    }\n    return parlayStakeLimit;\n};\n//# sourceMappingURL=liability.js.map"]},"metadata":{},"sourceType":"module"}